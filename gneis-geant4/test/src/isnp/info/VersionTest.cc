#include <sstream>
#include <gtest/gtest.h>
#include "isnp/info/Version.hh"

namespace isnp {

namespace info {

TEST(Version, Defines)
{
	EXPECT_TRUE(GNEISGEANT4LIB_VERSION_MAJOR >= 0);
	EXPECT_TRUE(GNEISGEANT4LIB_VERSION_MINOR >= 0);
	EXPECT_TRUE(GNEISGEANT4LIB_VERSION_PATCH >= 0);
}

TEST(Version, Get)
{
	const std::vector<int> ver = Version::Get();
	EXPECT_EQ(3, ver.size());
	EXPECT_EQ(GNEISGEANT4LIB_VERSION_MAJOR, ver[0]);
	EXPECT_EQ(GNEISGEANT4LIB_VERSION_MINOR, ver[1]);
	EXPECT_EQ(GNEISGEANT4LIB_VERSION_PATCH, ver[2]);
}

TEST(Version, GetAsString)
{
	std::stringstream s;
	s
	<< GNEISGEANT4LIB_VERSION_MAJOR
	<< '.'
	<< GNEISGEANT4LIB_VERSION_MINOR
	<< '.'
	<< GNEISGEANT4LIB_VERSION_PATCH;
	const G4String ver = Version::GetAsString();
	EXPECT_EQ(s.str(), ver);
}

TEST(Version, Matches)
{
	EXPECT_TRUE(
			Version::Matches(GNEISGEANT4LIB_VERSION_MAJOR, GNEISGEANT4LIB_VERSION_MINOR, GNEISGEANT4LIB_VERSION_PATCH)
	);
	EXPECT_TRUE(
			Version::Matches(GNEISGEANT4LIB_VERSION_MAJOR, GNEISGEANT4LIB_VERSION_MINOR)
	);
	EXPECT_TRUE(
			Version::Matches(GNEISGEANT4LIB_VERSION_MAJOR)
	);
	EXPECT_FALSE(
			Version::Matches(GNEISGEANT4LIB_VERSION_MAJOR + 1, GNEISGEANT4LIB_VERSION_MINOR, GNEISGEANT4LIB_VERSION_PATCH)
	);
	EXPECT_FALSE(
			Version::Matches(GNEISGEANT4LIB_VERSION_MAJOR, GNEISGEANT4LIB_VERSION_MINOR + 1, GNEISGEANT4LIB_VERSION_PATCH)
	);
	EXPECT_FALSE(
			Version::Matches(GNEISGEANT4LIB_VERSION_MAJOR, GNEISGEANT4LIB_VERSION_MINOR, GNEISGEANT4LIB_VERSION_PATCH + 1)
	);
}

TEST(Version, GetDateAsString)
{
	EXPECT_FALSE(Version::GetDateAsString().isNull());
}

}

}
